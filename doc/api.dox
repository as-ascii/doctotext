/*!
 * \page API
 *
 * \section main_idea Main idea - pipeline flow
 *
 * Pipes are components for writing expressive code when working on collections. Pipes chain together into a pipeline
 * that receives data from a source, operates on that data, and sends the results to a destination.
 * \image html main_flow.png width=50%
 *
 * \section main_elements Main elements - short description
 *
 * Importer - Imports and extracts all data from input streams. Importer contains parser object to parse elements like text, styles, images.\n
 * Transformer - Receives data from importer or another transformer and can transform it. For example,
 * we can use transformer to filter emails if it contains specific phrase, translate text to another language or sum values from table columns.\n
 * Exporter - Exporter class is responsible for exporting the parsed data from importer or transformer to an output stream.
 * We can export data as plain text or as html. There is an option to write our own specific exporter using data sent
 * by importer and transformer (see \ref parsing_process). In similar way there is a possibility to write custom importer or exporter.
 *
 * \section parsing_process Parsing process - control
 * During parsing process parser sends to us signals with structure docwire::Info. Signals are emitted when the parser
 * encounters a new node. New node is an abstract element in file which is represented by tag and tag's attributes
 * (docwire::StandardTag). New node could be for example page, paragraph or link. A node can contain other nodes e.g.
 * email node includes attachments. All node data are kept in Info structure. Additionally, Info allows for control of the parsing
 * process by set flags. Structure docwire::Info contains two flags:
 *   - skip - skips next node
 *   - cancel - cancels all parsing process
 *
 * Using these flags we can stop process (e.g. timeout), or we can choose which part of file we would like to parse
 * (e.g. 10 first page of pdf file or 10 last mails from mailbox) \n
 * Example of usage "cancel" and "skip": \ref example_4.cpp
 *
 * Tag name gives us information about the part of the document that was parsed. It could be a part of text (tag text or tag paragraph), table, list,
 * text style and so on. You can find the full list of available tags with description in docwire::StandardTag.
 * Some of tags contains attributes which are stored in docwire::Info::attributes. To get attribute from this map you need
 * name of attribute and type. Both are described in docwire::StandardTag.
 *
 * Important! Support for control processing proces (skip and cancel) is only for "pst", "ost",
 * "tiff", "jpeg", "bmp", "png", "pnm", "jfif", "jpg", "webp". This list also will be gradually completed.
 *
 * \section parser_parameters Parser parameters
 * docwire::ParserParameters provides mechanism to pass additional information to parser. For example you can choose
 * processing language for ocr parser. List of common parameters for all parsers are presented below.
 * <table>
 * <caption id="parser_parameters">Parameters for parsers</caption>
 * <tr><th>Parameter name <th>Parameter type <th>Parameter description
 *  <tr>
 *    <td> log_stream
 *    <td> std::ostream*
 *    <td> Output for parser logs. The default log stream is a std::cerr.
 *  <tr>
 *    <td> verbose_logging
 *    <td> bool
 *    <td> Flag indicating whether log mechanism should be enabled.
 *
 * \section parser_tags Parser tags
 * Each parser sends tags during the parsing process. It's required, because this is the only way to get parsed data from parser.
 * Parsers which don't fully support our api send one tag docwire::StandardTag::TAG_TEXT with all parsed text from document.
 * For rest of parser we present list of emitted tags:
 * <table>
 * <caption id="parser_tags">Tags for parsers</caption>
 * <tr><th>Parser name <th>Supported formats <th>Available tags
 *  <tr>
 *    <td>ODFOOXMLParser
 *    <td>"odt", "ods", "odp", "odg", "docx", "xlsx", "pptx", "ppsx"
 *    <td rowspan="2">
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TR
 *        <li>docwire::StandardTag::TAG_CLOSE_TR
 *        <li>docwire::StandardTag::TAG_TABLE
 *        <li>docwire::StandardTag::TAG_CLOSE_TABLE
 *        <li>docwire::StandardTag::TAG_TD
 *        <li>docwire::StandardTag::TAG_CLOSE_TD
 *        <li>docwire::StandardTag::TAG_TEXT
 *        <li>docwire::StandardTag::TAG_COMMENT
 *        <li>docwire::StandardTag::TAG_STYLE
 *        <li>docwire::StandardTag::TAG_CLOSE_STYLE
 *        <li>docwire::StandardTag::TAG_BR
 *        <li>docwire::StandardTag::TAG_METADATA
 *        <li>docwire::StandardTag::TAG_U
 *        <li>docwire::StandardTag::TAG_CLOSE_U
 *        <li>docwire::StandardTag::TAG_I
 *        <li>docwire::StandardTag::TAG_CLOSE_I
 *        <li>docwire::StandardTag::TAG_B
 *        <li>docwire::StandardTag::TAG_CLOSE_B
 *        <li>docwire::StandardTag::TAG_P
 *        <li>docwire::StandardTag::TAG_CLOSE_P
 *        <li>docwire::StandardTag::TAG_TAB
 *        <li>docwire::StandardTag::TAG_SPACE
 *        <li>docwire::StandardTag::TAG_LINK
 *        <li>docwire::StandardTag::TAG_CLOSE_LINK
 *        <li>docwire::StandardTag::TAG_LIST
 *        <li>docwire::StandardTag::TAG_LIST_CLOSE
 *        <li>docwire::StandardTag::TAG_LIST_ITEM_BULLET
 *        <li>docwire::StandardTag::TAG_LIST_ITEM_CLOSE_BULLET
 *        <li>docwire::StandardTag::TAG_LIST_ITEM_NUMBER
 *        <li>docwire::StandardTag::TAG_LIST_ITEM_CLOSE_NUMBER
 *      </ul>
 *  <tr>
 *    <td>ODFXMLParser
 *    <td>"fodt", "fods", "fodp", "fodg"
 *  <tr>
 *    <td>PSTParser
 *    <td>"pst", "ost"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TAB
 *        <li>docwire::StandardTag::TAG_FOLDER_HEADER
 *        <li>docwire::StandardTag::TAG_MAIL_HEADER
 *        <li>docwire::StandardTag::TAG_ATTACHMENT_HEADER
 *        <li>docwire::StandardTag::TAG_ATTACHMENT_BODY
 *        <li>docwire::StandardTag::TAG_ATTACHMENT_CLOSE_BODY
 *        <li>docwire::StandardTag::TAG_MAIL_BODY
 *        <li>docwire::StandardTag::TAG_MAIL_CLOSE_BODY
 *      </ul>
 *  <tr>
 *    <td>PdfParser
 *    <td>"pdf"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *        <li>docwire::StandardTag::TAG_PAGE
 *        <li>docwire::StandardTag::TAG_PAGE_CLOSE
 *      </ul>
 *  <tr>
 *    <td>HtmlParser
 *    <td>"html", "htm"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>OcrParser
 *    <td>"tiff", "jpeg", "bmp", "png", "pnm", "jfif", "jpg", "webp"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>EMLParser
 *    <td>"pst", "ost"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>DOCParse
 *    <td>"doc"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>XLSParser
 *    <td>"xls"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>XLSBParser
 *    <td>"xlsb"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>PPTParser
 *    <td>"ppt", "pps"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>IWorkParser
 *    <td>"pages", "key", "numbers"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>RTFParser
 *    <td>"rtf"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 *  <tr>
 *    <td>TXTParser
 *    <td>"txt", "text"
 *    <td>
 *      <ul>
 *        <li>docwire::StandardTag::TAG_TEXT
 *      </ul>
 * </table>
 *
 * \section logging Logs mechanism
 * DocWire parsers generate many logs with current processing status, warnings and errors. By default all logs are sent
 * to standard error stream, but there is an option to change it or also turn off logs mechanism. To redirect logs stream
 * or turn on/off logs we can use docwire::ParserParameters (\ref parser_parameters) as below:
 * \code
 * std::ofstream* my_log_stream = new std::ofstream("output_logs.txt");
 * docwire::ParserParameters parameters("log_stream", my_log_stream); // set log stream parameter
 * parameters += docwire::ParserParameters("verbose_logging", true); // turn on logs mechanism
 * \endcode
 */
