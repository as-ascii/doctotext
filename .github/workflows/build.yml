name: Build
on: [pull_request, workflow_dispatch]
permissions:
  packages: write
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022, macos-12, flyci-macos-large-latest-m1]
        triplet: [x64-linux-dynamic, x64-windows, x64-osx-dynamic, arm64-osx-dynamic]
        sanitizer: ["", "address", "thread"]
        exclude:
          - os: ubuntu-20.04
            triplet: x64-windows
          - os: ubuntu-20.04
            triplet: x64-osx-dynamic
          - os: ubuntu-20.04
            triplet: arm64-osx-dynamic
          - os: ubuntu-22.04
            triplet: x64-windows
          - os: ubuntu-22.04
            triplet: x64-osx-dynamic
          - os: ubuntu-22.04
            triplet: arm64-osx-dynamic
          - os: windows-2019
            triplet: x64-linux-dynamic
          - os: windows-2019
            triplet: x64-osx-dynamic
          - os: windows-2019
            triplet: arm64-osx-dynamic
          - os: windows-2022
            triplet: x64-linux-dynamic
          - os: windows-2022
            triplet: x64-osx-dynamic
          - os: windows-2022
            triplet: arm64-osx-dynamic
          - os: macos-12
            triplet: x64-linux-dynamic
          - os: macos-12
            triplet: x64-windows
          - os: macos-12
            triplet: arm64-osx-dynamic
          - os: flyci-macos-large-latest-m1
            triplet: x64-linux-dynamic
          - os: flyci-macos-large-latest-m1
            triplet: x64-windows
          - os: flyci-macos-large-latest-m1
            triplet: x64-osx-dynamic
          - os: windows-2022
            sanitizer: address # probably temporarily: https://github.com/actions/runner-images/issues/8891
        include:
          - os: ubuntu-22.04
            triplet: x64-linux-dynamic
            sanitizer: memcheck
          - os: ubuntu-22.04
            triplet: x64-linux-dynamic
            sanitizer: helgrind
          - os: ubuntu-22.04
            triplet: x64-linux-dynamic
            sanitizer: callgrind
    name: ${{ matrix.triplet }}-${{ matrix.os }}${{ matrix.sanitizer != '' && format('-{0}-sanitizer', matrix.sanitizer) || '' }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 150
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup MSVC dev command prompt # https://github.com/actions/runner-images/issues/8891
        if: matrix.os == 'windows-2022' && matrix.sanitizer == 'address'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
          toolset: '14'
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Build DocWire SDK
        run: |
          ${{ matrix.os == 'ubuntu-20.04' && 'sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && sudo apt-get update && sudo apt-get install gcc-11 g++-11 -y && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 && sudo update-alternatives --set gcc /usr/bin/gcc-11' || '' }}
          ${{ (matrix.sanitizer == 'memcheck' || matrix.sanitizer == 'helgrind' || matrix.sanitizer == 'callgrind') && 'sudo apt-get install -y valgrind' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt-get install -y autopoint doxygen' || '' }}
          ${{ runner.os == 'macOS' && 'brew install md5sha1sum automake autogen doxygen' || '' }}
          ${{ runner.os == 'Windows' && 'choco install archiver doxygen.install graphviz -y' || '' }}
          ${{ runner.os == 'Windows' && './build.ps1' || './build.sh' }}
        env:
          CREATE_ARCHIVE: "1"
          BINARY_CACHE_GITHUB_USER: "github-actions"
          BINARY_CACHE_GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          BINARY_CACHE_GITHUB_OWNERS: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.repo.owner != github.event.pull_request.base.repo.owner) && format('{0} {1}', github.event.pull_request.base.repo.owner.login, github.event.pull_request.head.repo.owner.login) || github.repository_owner }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SANITIZER: ${{ matrix.sanitizer }}
          ASAN_OPTIONS: ${{ matrix.sanitizer == 'address' && 'detect_leaks=0:detect_container_overflow=0' || '' }}
          TSAN_OPTIONS: ${{ matrix.sanitizer == 'thread' && format('suppressions={0}/tools/thread_sanitizer_suppressions.txt', github.workspace) || '' }}
          DEBUG: ${{ runner.debug }}
      - name: "Upload binaries"
        uses: actions/upload-artifact@v4
        if: success() && matrix.sanitizer == ''
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-binaries
          path: |
              ${{ runner.os == 'Windows' && './docwire*.zip' || './docwire*.bz2' }}
              ./docwire*.sha1
          if-no-files-found: error
      - name: "Upload logs"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-${{ matrix.sanitizer == '' && 'binaries' || format('{0}-sanitizer', matrix.sanitizer) }}-logs
          path: |
            vcpkg/buildtrees/*/*.log
            ${{ matrix.sanitizer == 'callgrind' && 'vcpkg/buildtrees/**/callgrind.out.*' || '' }}
          if-no-files-found: error
