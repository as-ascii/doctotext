name: Build
on: [pull_request, workflow_dispatch]
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, macos-12, flyci-macos-large-latest-m1]
        triplet: [x64-linux-dynamic, x64-windows, x64-osx-dynamic, arm64-osx-dynamic]
        sanitizer: ["", "address", "thread"]
        exclude:
          - os: ubuntu-20.04
            triplet: x64-windows
          - os: ubuntu-20.04
            triplet: x64-osx-dynamic
          - os: ubuntu-20.04
            triplet: arm64-osx-dynamic
          - os: ubuntu-22.04
            triplet: x64-windows
          - os: ubuntu-22.04
            triplet: x64-osx-dynamic
          - os: ubuntu-22.04
            triplet: arm64-osx-dynamic
          - os: windows-2019
            triplet: x64-linux-dynamic
          - os: windows-2019
            triplet: x64-osx-dynamic
          - os: windows-2019
            triplet: arm64-osx-dynamic
          - os: macos-12
            triplet: x64-linux-dynamic
          - os: macos-12
            triplet: x64-windows
          - os: macos-12
            triplet: arm64-osx-dynamic
          - os: flyci-macos-large-latest-m1
            triplet: x64-linux-dynamic
          - os: flyci-macos-large-latest-m1
            triplet: x64-windows
          - os: flyci-macos-large-latest-m1
            triplet: x64-osx-dynamic
    name: ${{ matrix.triplet }}-${{ matrix.os }}${{ matrix.sanitizer != '' && format('-{0}-sanitizer', matrix.sanitizer) || '' }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 150
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - run: |
          if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
            sudo update-alternatives --set gcc /usr/bin/gcc-10
          fi
          ${{ runner.os == 'Windows' && './build.ps1' || './build.sh' }}
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SANITIZER: ${{ matrix.sanitizer }}
          ASAN_OPTIONS: ${{ matrix.sanitizer == 'address' && 'detect_leaks=0:detect_container_overflow=0' || '' }}
          TSAN_OPTIONS: ${{ matrix.sanitizer == 'thread' && format('suppressions={0}/tools/thread_sanitizer_suppressions.txt', github.workspace) || '' }}
      - uses: actions/upload-artifact@v3
        if: always() && matrix.sanitizer == ''
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-binaries
          path: |
              ${{ runner.os == 'Windows' && './docwire*.zip' || './docwire*.bz2' }}
              ./docwire*.sha1
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-${{ matrix.sanitizer == '' && 'binaries' || format('{0}-sanitizer', matrix.sanitizer) }}-logs
          path: vcpkg/buildtrees/*/*.log
          if-no-files-found: error
